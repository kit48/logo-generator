{"version":3,"sources":["serviceWorker.ts","components/Logo/index.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","props","name","number","backgroundColor","style","square","rest","fontStyle","marginTop","marginLeft","userSelect","width","height","paddingLeft","boxSizing","color","fontFamily","letterSpacing","fontSize","lineHeight","Page","React","setName","setNumber","getColorFromString","setColor","setSquare","calloutVisible","setCalloutVisible","useSize","document","getElementsByTagName","loading","setLoading","previewVisible","setPreviewVisible","minHeight","display","justifyContent","alignItems","marginBottom","Stack","horizontal","verticalAlign","Logo","key","id","str","onClick","Callout","target","onDismiss","DelayedRender","ColorPicker","onChange","_","colorObj","TextField","label","value","newValue","toUpperCase","Toggle","checked","DefaultButton","iconProps","iconName","disabled","length","logo","getElementById","html2canvas","foreignObjectRendering","logging","then","canvas","previewLogoNode","console","log","appendChild","catch","error","finally","text","horizontalAlign","Text","variant","block","Modal","isOpen","isBlocking","margin","link","createElement","download","href","toDataURL","click","initializeIcons","ReactDOM","render","StrictMode","App","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.023106f9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as React from 'react';\n\nexport interface LogoProps extends React.HTMLProps<HTMLDivElement> {\n  name: string;\n  number: string;\n  backgroundColor: string;\n  square?: boolean;\n}\n\nexport default (props: LogoProps) => {\n  const { name, number, backgroundColor = '#8fd3f6', style, square, ...rest } = props;\n\n  const fontStyle: React.CSSProperties = {\n    marginTop: -6,\n    marginLeft: -6,\n  };\n\n  return (\n    <div\n      style={{\n        userSelect: 'none',\n        width: square ? 330 : 234,\n        height: 330,\n        paddingLeft: square ? 48 : 0,\n        backgroundColor,\n        boxSizing: 'border-box',\n        color: '#fefefe',\n        fontFamily: \"'Inconsolata', monospace\",\n        letterSpacing: '-12px',\n        fontSize: '180px',\n        lineHeight: '125px',\n        ...style,\n      }}\n      {...rest}\n    >\n      <div style={fontStyle}>{name || '　'}</div>\n      <div style={fontStyle}>{number}</div>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport {\n  Stack,\n  TextField,\n  ColorPicker,\n  getColorFromString,\n  DefaultButton,\n  Toggle,\n  Callout,\n  DelayedRender,\n  Text,\n  Modal,\n} from '@fluentui/react';\nimport { useSize } from 'ahooks';\nimport html2canvas from 'html2canvas';\n\nimport Logo from './components/Logo';\n\nfunction Page() {\n  const [name, setName] = React.useState('SNH');\n  const [number, setNumber] = React.useState('48');\n  const [color, setColor] = React.useState(getColorFromString('#8fd3f6')!);\n  const [square, setSquare] = React.useState(false);\n  const [calloutVisible, setCalloutVisible] = React.useState(false);\n  const { width } = useSize(document.getElementsByTagName('body')[0]);\n  const [loading, setLoading] = React.useState(false);\n  const [previewVisible, setPreviewVisible] = React.useState(false);\n\n  function handlePreview() {\n    setLoading(true);\n    setPreviewVisible(true);\n    const logo = document.getElementById('logo')!;\n\n    html2canvas(logo, { foreignObjectRendering: false, logging: true })\n      .then(function (canvas) {\n        // 直接通过 cavas 下载会有图片显示不完整的 bug\n        const previewLogoNode = document.getElementById('preview-logo');\n        console.log(previewLogoNode);\n        previewLogoNode?.appendChild(canvas);\n        // const link = document.createElement('a');\n        // link.download = `${name}${number}.png`;\n        // link.href = canvas.toDataURL();\n        // link.click();\n      })\n      .catch(function (error) {\n        console.error('oops, something went wrong!', error);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }\n\n  function handleDownload() {\n    const previewLogoNode = document.getElementById('preview-logo');\n    const canvas = previewLogoNode?.getElementsByTagName('canvas')[0];\n    if (canvas) {\n      const link = document.createElement('a');\n      link.download = `${name}${number}.png`;\n      link.href = canvas.toDataURL();\n      link.click();\n    }\n  }\n\n  return (\n    <div\n      style={{ width: '100vw', minHeight: '100vh', display: 'flex', justifyContent: 'center', alignItems: 'center' }}\n    >\n      <div style={{ marginBottom: 80 }}>\n        <Stack horizontal={!!width && width >= 734} verticalAlign='center'>\n          <div style={{ width: 360, display: 'flex', justifyContent: 'center' }}>\n            <Logo\n              key={`${name}${number}`}\n              id='logo'\n              name={name}\n              number={number}\n              backgroundColor={color.str}\n              square={square}\n              onClick={() => {\n                setCalloutVisible(!calloutVisible);\n              }}\n            />\n            {calloutVisible && (\n              <Callout\n                target='#logo'\n                onDismiss={() => {\n                  setCalloutVisible(false);\n                }}\n              >\n                <DelayedRender>\n                  <ColorPicker\n                    color={color}\n                    onChange={(_, colorObj) => {\n                      setColor(colorObj);\n                    }}\n                  />\n                </DelayedRender>\n              </Callout>\n            )}\n          </div>\n          <Stack style={{ width: 360 }}>\n            <TextField\n              label='Name'\n              value={name}\n              onChange={(_, newValue) => {\n                setName(newValue!.toUpperCase());\n              }}\n            />\n            <TextField\n              label='Number'\n              value={`${number}`}\n              onChange={(_, newValue) => {\n                setNumber(newValue!);\n              }}\n            />\n            <Toggle\n              label='Square'\n              checked={square}\n              onChange={(_, checked) => {\n                setSquare(!!checked);\n              }}\n            />\n            <div style={{ marginTop: 24 }}>\n              <DefaultButton\n                iconProps={{ iconName: 'PictureFill' }}\n                disabled={loading || name.length !== 3 || number.length !== 2}\n                onClick={handlePreview}\n                text='预览'\n              />\n            </div>\n          </Stack>\n        </Stack>\n        <Stack horizontalAlign='center' style={{ marginTop: 48 }}>\n          <Text variant='large' block>\n            温馨提示\n          </Text>\n          <Text style={{ marginTop: 12 }}>为了更好的用户体验，请使用 PC 访问本网站。</Text>\n        </Stack>\n        <Modal\n          isOpen={previewVisible}\n          onDismiss={() => {\n            setPreviewVisible(false);\n          }}\n          isBlocking={false}\n        >\n          <Stack horizontalAlign='center'>\n            <div\n              id='preview-logo'\n              style={{\n                width: 360,\n                height: 330,\n                display: 'flex',\n                justifyContent: 'center',\n                marginTop: 36,\n              }}\n            ></div>\n            <div style={{ margin: '24px 0' }}>\n              <DefaultButton\n                iconProps={{ iconName: 'Download' }}\n                disabled={loading}\n                onClick={handleDownload}\n                text='下载'\n              />\n            </div>\n          </Stack>\n        </Modal>\n      </div>\n    </div>\n  );\n}\n\nexport default Page;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { initializeIcons } from '@uifabric/icons';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport './index.css';\n\ninitializeIcons();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}